// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	bookmarks "charum/business/bookmarks"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountByThreadID provides a mock function with given fields: threadID
func (_m *Repository) CountByThreadID(threadID primitive.ObjectID) (int, error) {
	ret := _m.Called(threadID)

	var r0 int
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) int); ok {
		r0 = rf(threadID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(threadID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: domain
func (_m *Repository) Create(domain *bookmarks.Domain) (bookmarks.Domain, error) {
	ret := _m.Called(domain)

	var r0 bookmarks.Domain
	if rf, ok := ret.Get(0).(func(*bookmarks.Domain) bookmarks.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(bookmarks.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bookmarks.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: domain
func (_m *Repository) Delete(domain *bookmarks.Domain) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*bookmarks.Domain) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllByThreadID provides a mock function with given fields: threadID
func (_m *Repository) DeleteAllByThreadID(threadID primitive.ObjectID) error {
	ret := _m.Called(threadID)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(threadID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllByUserID provides a mock function with given fields: userID
func (_m *Repository) DeleteAllByUserID(userID primitive.ObjectID) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllByUserID provides a mock function with given fields: UserID
func (_m *Repository) GetAllByUserID(UserID primitive.ObjectID) ([]bookmarks.Domain, error) {
	ret := _m.Called(UserID)

	var r0 []bookmarks.Domain
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) []bookmarks.Domain); ok {
		r0 = rf(UserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bookmarks.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserIDAndThreadID provides a mock function with given fields: UserID, threadID
func (_m *Repository) GetByUserIDAndThreadID(UserID primitive.ObjectID, threadID primitive.ObjectID) (bookmarks.Domain, error) {
	ret := _m.Called(UserID, threadID)

	var r0 bookmarks.Domain
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, primitive.ObjectID) bookmarks.Domain); ok {
		r0 = rf(UserID, threadID)
	} else {
		r0 = ret.Get(0).(bookmarks.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(UserID, threadID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
