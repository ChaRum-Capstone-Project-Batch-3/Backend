// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	query "charum/dto/query"

	topics "charum/business/topics"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: domain
func (_m *Repository) Create(domain *topics.Domain) (topics.Domain, error) {
	ret := _m.Called(domain)

	var r0 topics.Domain
	if rf, ok := ret.Get(0).(func(*topics.Domain) topics.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(topics.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*topics.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id primitive.ObjectID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id primitive.ObjectID) (topics.Domain, error) {
	ret := _m.Called(id)

	var r0 topics.Domain
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) topics.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(topics.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTopic provides a mock function with given fields: topic
func (_m *Repository) GetByTopic(topic string) (topics.Domain, error) {
	ret := _m.Called(topic)

	var r0 topics.Domain
	if rf, ok := ret.Get(0).(func(string) topics.Domain); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Get(0).(topics.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManyWithPagination provides a mock function with given fields: _a0, domain
func (_m *Repository) GetManyWithPagination(_a0 query.Request, domain *topics.Domain) ([]topics.Domain, int, error) {
	ret := _m.Called(_a0, domain)

	var r0 []topics.Domain
	if rf, ok := ret.Get(0).(func(query.Request, *topics.Domain) []topics.Domain); ok {
		r0 = rf(_a0, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]topics.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(query.Request, *topics.Domain) int); ok {
		r1 = rf(_a0, domain)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(query.Request, *topics.Domain) error); ok {
		r2 = rf(_a0, domain)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: domain
func (_m *Repository) Update(domain *topics.Domain) (topics.Domain, error) {
	ret := _m.Called(domain)

	var r0 topics.Domain
	if rf, ok := ret.Get(0).(func(*topics.Domain) topics.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(topics.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*topics.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
