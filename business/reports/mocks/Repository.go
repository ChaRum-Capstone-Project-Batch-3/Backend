// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	reports "charum/business/reports"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckByUserID provides a mock function with given fields: userID, reportedID
func (_m *Repository) CheckByUserID(userID primitive.ObjectID, reportedID primitive.ObjectID) (reports.Domain, error) {
	ret := _m.Called(userID, reportedID)

	var r0 reports.Domain
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, primitive.ObjectID) reports.Domain); ok {
		r0 = rf(userID, reportedID)
	} else {
		r0 = ret.Get(0).(reports.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(userID, reportedID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: domain
func (_m *Repository) Create(domain *reports.Domain) (reports.Domain, error) {
	ret := _m.Called(domain)

	var r0 reports.Domain
	if rf, ok := ret.Get(0).(func(*reports.Domain) reports.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(reports.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*reports.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]reports.Domain, error) {
	ret := _m.Called()

	var r0 []reports.Domain
	if rf, ok := ret.Get(0).(func() []reports.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reports.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReportedThreads provides a mock function with given fields:
func (_m *Repository) GetAllReportedThreads() ([]reports.Domain, error) {
	ret := _m.Called()

	var r0 []reports.Domain
	if rf, ok := ret.Get(0).(func() []reports.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reports.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReportedUsers provides a mock function with given fields:
func (_m *Repository) GetAllReportedUsers() ([]reports.Domain, error) {
	ret := _m.Called()

	var r0 []reports.Domain
	if rf, ok := ret.Get(0).(func() []reports.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reports.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByReportedID provides a mock function with given fields: id
func (_m *Repository) GetByReportedID(id primitive.ObjectID) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
