// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// Function is an autogenerated mock type for the Function type
type Function struct {
	mock.Mock
}

// Delete provides a mock function with given fields: folder, filename
func (_m *Function) Delete(folder string, filename string) error {
	ret := _m.Called(folder, filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(folder, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rename provides a mock function with given fields: folder, oldFilename, newFilename
func (_m *Function) Rename(folder string, oldFilename string, newFilename string) (string, error) {
	ret := _m.Called(folder, oldFilename, newFilename)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(folder, oldFilename, newFilename)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(folder, oldFilename, newFilename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: folder, file, filename
func (_m *Function) Upload(folder string, file *multipart.FileHeader, filename string) (string, error) {
	ret := _m.Called(folder, file, filename)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *multipart.FileHeader, string) string); ok {
		r0 = rf(folder, file, filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *multipart.FileHeader, string) error); ok {
		r1 = rf(folder, file, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFunction interface {
	mock.TestingT
	Cleanup(func())
}

// NewFunction creates a new instance of Function. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFunction(t mockConstructorTestingTNewFunction) *Function {
	mock := &Function{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
